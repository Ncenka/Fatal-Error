----------------------------------------------------------------------------------------------------
-- Compatibility Patches
----------------------------------------------------------------------------------------------------

function compatibility_patches()
	if tasks_placeable_waypoints then
		tasks_placeable_waypoints.pda_defs = {
			["device_pda_0"] = {
				show_w              = false,
				autotag             = false,
			},
			["device_pda_1"] = {
				show_w              = true,
				autotag             = true,
			},
			["device_pda_2"] = {
				show_w              = true,
				autotag             = true,    
			},
			["device_pda_3"] = {
				show_w              = true,
				autotag             = true,    
			},
			["device_pda_4"] = {
				show_w              = true,
				autotag             = true,
			},
			["device_pda_getac"] = {
				show_w              = true,
				autotag             = true,
			},
			["device_pda_milspec"] = {
				show_w              = true,
				autotag             = true,
			},
			["device_pda_new"] = {
				show_w              = true,
				autotag             = true,
			},
		}
	end
	if item_milpda then
		item_milpda.pda_defs = {
			["device_pda_0"] = { 
				obeybl				= true,		
				show_e				= false, 	
				show_n 				= false, 	
				show_f 				= false, 	
				show_k 				= false, 	
				progmult 			= 0, 		
			},
			["device_pda_1"] = { 
				obeybl				= true,		
				show_e				= false, 	
				show_n 				= false, 	
				show_f 				= false, 	
				show_k 				= false, 	
				progmult 			= 0, 		
			},
			["device_pda_2"] = {
				obeybl				= true,
				show_e				= false,
				show_n 				= false,
				show_f 				= true,
				show_k 				= true,
				progmult 			= 0.1, 		
			},
			["device_pda_3"] = {
				obeybl				= true,
				show_e				= false,
				show_n 				= true,
				show_f 				= true,
				show_k 				= true,
				progmult 			= 0.5, 		
			},
			["device_pda_4"] = {
				obeybl				= true,
				show_e				= false,
				show_n 				= true,
				show_f 				= true,
				show_k 				= true,
				progmult 			= 1, 		
			},
			["device_pda_getac"] = {
				obeybl				= true,
				show_e				= true,
				show_n 				= true,
				show_f 				= true,
				show_k 				= true,
				progmult 			= 1, 		
			},
			["device_pda_milspec"] = {
				obeybl				= true,
				show_e				= true,
				show_n 				= true,
				show_f 				= true,
				show_k 				= true,
				progmult 			= 1, 		
			},
			["device_pda_new"] = {
				obeybl				= true,
				show_e				= true,
				show_n 				= false,
				show_f 				= false,
				show_k 				= true,
				progmult 			= 1, 		
			},
		}
	end
end

----------------------------------------------------------------------
-- ui_pda_taskboard_tab
----------------------------------------------------------------------

-- Just kill this feature
if ui_pda_taskboard_tab then
    function ui_pda_taskboard_tab.on_key_release()
        return
    end
end

----------------------------------------------------------------------
-- item_device
----------------------------------------------------------------------

function update_geiger(item)
	if item:section():find("detector_geiger") then
		item_device.device_geiger = db.actor:object("detector_geiger") and "detector_geiger" or "detector_geiger2"
	end
end

function on_game_start()
	RegisterScriptCallback("actor_on_item_drop",update_geiger)
	RegisterScriptCallback("actor_on_item_take",update_geiger)
	RegisterScriptCallback("actor_on_first_update",compatibility_patches)
end

----------------------------------------------------------------------
-- item_parts
----------------------------------------------------------------------
function item_parts.timer_disassembly_item(npc_id, parts_tbl, sec, con, name)

	-- Who is item owner? we must give them the parts
	local npc = npc_id and get_object_by_id(npc_id)
	if (not npc) then
		printf("~ item_parts timer | no owner found")
		return
	end
	
	-- Send news
	local parts_text = item_parts.create_disassemble_list(parts_tbl)
	actor_menu.set_item_news("success", "weapon_ammo", "st_dis_text_11", name, game.translate_string("st_dis_text_9"), parts_text)

	-- Give disassemble parts
	for i=1,#parts_tbl do
		if ini_sys:section_exist(parts_tbl[i]) then
			if IsItem("part",parts_tbl[i]) and utils_item.is_degradable(nil, parts_tbl[i]) then
				local se_result = alife_create(parts_tbl[i], npc:position(), npc:level_vertex_id(), npc:game_vertex_id(), npc:id(), false)
				local data_result = utils_stpk.get_item_data(se_result)
				data_result.condition = item_parts.get_suitable_part_con(sec, con)
				utils_stpk.set_item_data(data_result,se_result)
				alife():register(se_result)
				--printf("/ Disassemble | inv_item_disassemble | Get new "true" part from disassembling: " .. parts_tbl[i])
			else
				alife_create_item(parts_tbl[i], npc)
				--printf("/ Disassemble | inv_item_disassemble | Get new part from disassembling: " .. parts_tbl[i])
			end
		end
	end
	
	-- Extract battery from devices
	local battery = ini_sys:r_string_ex(sec,"battery") -- right battery
	if IsItem("device", sec) and battery and item_device.is_device_charged(nil, sec, con) then
		alife_create_item(battery, npc, {cond = con})
	end
	return true
end

----------------------------------------------------------------------
-- sim_squad_scripted
----------------------------------------------------------------------

factions_dont_show = { 
	["monolith"] = true, 
	["greh"] = true, 
	["zombied"] = true, 
}

squad_icons = {
	["stalker"]     = "warfare_stalker_spot",
	["dolg"]        = "warfare_duty_spot",
	["freedom"]     = "warfare_freedom_spot",
	["killer"]      = "warfare_killer_spot",
	["csky"]        = "warfare_csky_spot",
	["monolith"]    = "warfare_monolith_spot",
	["army"]        = "warfare_army_spot",
	["ecolog"]      = "warfare_ecolog_spot",
	["bandit"]      = "warfare_bandit_spot",
	["greh"]   		= "warfare_greh_spot",
	["isg"]   		= "warfare_isg_spot",
	["renegade"]   	= "warfare_renegade_spot",
	["greh_npc"] 	= "warfare_greh_spot",
	["army_npc"] 	= "warfare_army_spot",
	["zombied"]     = "warfare_zombied_spot",
	["monster"]     = "warfare_mutant_spot",
}

function sim_squad_scripted.sim_squad_scripted.show(self)
	
	if self.show_disabled then
		self:hide()
		return
	end

    if (level.map_has_object_spot(self:commander_id(), "ui_pda2_special_location")~=0) or
	(level.map_has_object_spot(self:commander_id(), "ui_pda2_trader_location")~=0) or
	(level.map_has_object_spot(self:commander_id(), "ui_pda2_mechanic_location")~=0) or
	(level.map_has_object_spot(self:commander_id(), "ui_pda2_scout_location")~=0) or
	(level.map_has_object_spot(self:commander_id(), "ui_pda2_quest_npc_location")~=0) or
	(level.map_has_object_spot(self:commander_id(), "ui_pda2_barman_location")~=0) or
	(level.map_has_object_spot(self:commander_id(), "ui_pda2_medic_location")~=0) then
		self.show_disabled = true
		return
	end

	if (self.registered_with_warfare) then --_G.WARFARE
		local faction = self:get_squad_community()	
		local enemy = game_relations.is_factions_enemies(warfare.actor_faction, faction)
		local friend = warfare.actor_faction == faction or game_relations.is_factions_friends(warfare.actor_faction, faction)

		if (warfare_options.options.fog_of_war) then
			local fog_of_war_distance = warfare_options.options.fog_of_war_distance
			fog_of_war_distance = tonumber(fog_of_war_distance)
			
			local levelID = self.m_game_vertex_id and game_graph():vertex(self.m_game_vertex_id):level_id()
			local visible = false
			
			if (levelID == get_player_level_id()) then
				local dist = warfare.distance_to_xz_sqr(self.position, alife():actor().position)

				if (dist < fog_of_war_distance*fog_of_war_distance) then
					visible = true
				end
			end
			
			if not (visible) then
				if (sim_offline_combat.squads_by_level[levelID]) then
					for squadID,_ in pairs(sim_offline_combat.squads_by_level[levelID]) do
						local squad = squadID and alife_object(squadID)

						if (squad and squad:clsid() == clsid.online_offline_group_s) then
							if (squad:get_squad_community() == warfare.actor_faction) then
								if (warfare.distance_to_xz_sqr(squad.position, self.position) < fog_of_war_distance*fog_of_war_distance) then
									visible = true
									break
								end
							end
						end
					end
				end
			end

			local info = nil

			if (self:get_squad_community() == warfare.actor_faction or game_relations.is_factions_friends(self:get_squad_community(), warfare.actor_faction)) then
				info = sim_squad_warfare.get_warfare_info(self)
			else
				info = sim_squad_warfare.get_enemy_info(self)

				if (game_relations.is_factions_enemies(self:get_squad_community(), warfare.actor_faction) and warfare_options.options.hide_unfriendly_squads) then
					visible = false
				end
			end

			if (visible) then
				if not (self.warfare_spot) then
					self.warfare_spot = squad_icons[faction]
					level.map_add_object_spot(self.id, self.warfare_spot, info)
				else
					level.map_change_spot_hint(self.id, self.warfare_spot, info)
				end
			else
				if (self.warfare_spot) then
					level.map_remove_object_spot(self.id, self.warfare_spot)
					self.warfare_spot = nil
				end
			end
		else
			local info = nil

			if (self:get_squad_community() == warfare.actor_faction or game_relations.is_factions_friends(self:get_squad_community(), warfare.actor_faction)) then
				info = sim_squad_warfare.get_warfare_info(self)
			else
				info = sim_squad_warfare.get_enemy_info(self)
			end

			if not (self.warfare_spot) then
				local spot = squad_icons[faction]
				
				if (spot) then
					if (friend or not warfare_options.options.hide_unfriendly_squads) then
						level.map_add_object_spot(self.id, spot, info)
						self.warfare_spot = spot
					end
				end
			else
				if not (friend or not warfare_options.options.hide_unfriendly_squads) then
					level.map_remove_object_spot(self.id, self.warfare_spot)
					self.warfare_spot = nil
				else
					level.map_change_spot_hint(self.id, self.warfare_spot, info)
				end
			end
		end
	else
		local sim = alife()
		local se_actor = sim:actor()
		local spot = ""
		
		-- 1. Debug mode + Debug HUD enabled
		if (DEV_DEBUG and dbg_map_hud) then
			spot = squad_icons[self.player_id] or "warfare_mutant_spot"
		
		-- 2. Improved PDAs
		elseif db.actor then
		
			local pda = db.actor:item_in_slot(8)
			
			if pda and simulation_objects.is_on_the_same_level(se_actor,self) and (not is_squad_monster[self.player_id]) then
				
				local show_map_squads = ini_sys:r_string_ex(pda:section(),"show_map_squads")
				local comm = get_actor_true_community()
				
				if show_map_squads == "faction" and (self.player_id == comm) then				
					spot = squad_icons[self.player_id]
					
				elseif show_map_squads == "neutral" and (not game_relations.is_factions_enemies(comm,self.player_id)) then
					spot = squad_icons[self.player_id]
					
				elseif show_map_squads == "all" and not factions_dont_show[self.player_id] and not factions_dont_show[comm] then
					spot = squad_icons[self.player_id]
					
				elseif show_map_squads == "all" and factions_dont_show[comm] then
					spot = squad_icons[self.player_id]
					
				elseif show_map_squads == "enemies" and game_relations.is_factions_enemies(comm,self.player_id) and not factions_dont_show[self.player_id] then
					spot = squad_icons[self.player_id]
				end
			end
		end
		
		if (spot ~= "") then
			if spot == self.spot_section then
				level.map_change_spot_hint(self.id, self.spot_section, self:get_squad_props()) --self.current_spot_id
				return
			end
			
			if (self.spot_section == nil) then
				level.map_add_object_spot(self.id, spot, self:get_squad_props())
			else
				level.map_remove_object_spot(self.id, self.spot_section)
				level.map_add_object_spot(self.id, spot, self:get_squad_props())
			end
			
			self.spot_section = spot
			
		elseif (self.spot_section ~= nil) then
			level.map_remove_object_spot(self.id, self.spot_section)
			self.spot_section = nil
		end
	end
end