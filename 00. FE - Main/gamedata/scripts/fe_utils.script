IS_AOE = false
SECURITY_KEY = nil
LOG_LINES = {}

----------------------------------------------------------------------------------------------------
-- Setters
----------------------------------------------------------------------------------------------------

function set_broken(obj, val) 
	if not failsafe(obj) then return end -- failsafe
    if not val then val = 2 end -- failsafe

    if val == 1 then
	    item_device.dev_items[obj:id()].is_broken = true
        obj:set_device_enabled(false)
        if db.actor:item_in_slot(8) and db.actor:item_in_slot(8):id() == obj:id() then
            ui_pda_radio_tab.action_radio_stop()
            ui_pda_radio_tab.action_plyr_stop()
        end
    elseif val == 2 then
        item_device.dev_items[obj:id()].is_broken = false
        news_manager.send_tip(db.actor, game.translate_string("st_device_fix"), nil, default, 10000)
        obj:set_device_enabled(true)
    end
    
end

function set_bsod(obj, val)
    if not failsafe(obj) then return end -- failsafe
    if not val then val = false end -- failsafe

    item_device.dev_items[obj:id()].is_bsod = val
end

function set_screen_damage(obj, val)
    if not failsafe(obj) then return end -- failsafe

    local damage
    if val == 1 then
       damage = get_screen_damage(obj) + 1
       damage = clamp(damage, 0, 5)
       utils_obj.play_sound("material\\glass\\glass_fall03hl")
    elseif val == 2 then
        damage = get_screen_damage(obj)
    else
        damage = 0
        news_manager.send_tip(db.actor, game.translate_string("st_pda_screen_fix"), nil, default, 10000)
    end

    if damage == 0 then
        obj:set_shader(1, "pda_screen", "item\\item_pda2\\item_pda_glass", true)
        item_device.dev_items[obj:id()].damage = 0
    else
        obj:set_shader(1, "pda_screen", "item\\item_pda2\\item_pda_glass_damage" .. damage, true)
        item_device.dev_items[obj:id()].damage = damage
    end

end

function set_pda_xml(obj)
    if not failsafe(obj) then return end -- failsafe
    if item_device.dev_items[obj:id()].interface == nil then item_device.dev_items[obj:id()].interface = "pda" end -- fallback to default UI if UI is nil

    local curr_interface = ActorMenu.get_pda_menu():GetPdaXml():gsub("%.xml", "")
    local base_interface = item_device.dev_items[obj:id()].interface

    if curr_interface ~= base_interface then
        ActorMenu.get_pda_menu():SetPdaXml(base_interface .. ".xml")
        printf("$FE: PDA UI XML file set to: %s.xml", base_interface)
    end

    if fatal_error_mcm.REBOOT > 0 then
        ActorMenu.get_pda_menu():SetActiveSubdialog("eptReboot")
    end

end

function set_apps(obj)
    if not failsafe(obj) then return end -- failsafe

    if mac_mcm.PDA_APPS.app_taskboard then mac_mcm.remove_app("app_taskboard") end 
    if mac_mcm.PDA_APPS.app_interactive then mac_mcm.remove_app("app_interactive") end 
    local taskboard = ui_pda_taskboard_tab and ini_sys:r_bool_ex(obj:section(),"tab_taskboard")
    local interactive = pda_inter_gui and ini_sys:r_bool_ex(obj:section(),"tab_interactive")

    if taskboard == true then
        mac_mcm.add_app("app_taskboard", 
            {name = "pda_btn_taskboard", texture = "app_taskboard", tab = "eptTaskboard", func = ui_pda_taskboard_tab.get_ui}
        )
    end
    if interactive == true then
        mac_mcm.add_app("app_interactive", 
            {name = "pda_btn_interactive", texture = "app_interactive", tab = "eptInteractive", func = pda_inter_gui.start_PDAX}
        ) 
    end

end

----------------------------------------------------------------------------------------------------
-- Issers\Getters
----------------------------------------------------------------------------------------------------

function is_broken(obj)
	if not failsafe(obj) then return false end -- failsafe
	return item_device.dev_items[obj:id()].is_broken
end

function is_bsod(obj)
	if not failsafe(obj) then return false end -- failsafe
	return item_device.dev_items[obj:id()].is_bsod
end

function is_overclocked(obj)
	if not failsafe(obj) then return false end -- failsafe
	return item_device.dev_items[obj:id()].is_overclocked
end

function get_screen_damage(obj)
    if not failsafe(obj) then return 0 end -- failsafe
    return item_device.dev_items[obj:id()].damage
end

function get_pda_tier(obj)
    if not failsafe(obj) then return 5 end -- failsafe
    if ini_sys:r_float_ex(obj:section(),"tier") <= 5 then
        return ini_sys:r_float_ex(obj:section(),"tier")
    else
        return 5
    end
end

----------------------------------------------------------------------------------------------------
-- Utilities
----------------------------------------------------------------------------------------------------

function read_log()
    local path = ""
    local file
    local fs = getFS() --gets FS module
    local flist = fs:file_list_open_ex("$logs$", bit_or(FS.FS_ListFiles, FS.FS_RootOnly),"*.log") --gets full path to main .log file of the game
    local f_cnt = flist:Size()
    for it = 0, f_cnt - 1 do
        local file_name = flist:GetAt(it):NameFull() --can't really explain, but it's still about getting log file
        path = fs:update_path("$logs$", "") .. file_name
        if string.sub(path, -4) == ".log" then
            file = io.open(path, "r") --we open log with I/O system for reading
        end
    end
    if file then
        k = 0
        for line in file:lines() do --we read first 15 lines of log file and save them to variable (at that moment log is already created by the game)
            k = k + 1
            if k < 2 then
                LOG_LINES[k] = line
            end
        end
        file:close()
    end

end

function generate_random_string(length)
    local chars = "0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ"
    local random_string = ""
    for i = 1, length do
        local random_index = math.random(1, #chars)
        random_string = random_string .. chars:sub(random_index, random_index)
    end
    return random_string
end

function to_roman(val)
    if type(val) ~= "number" or val < 1 or val > 3999 then
        return "Error: number must be from 1 to 3999"
    end
    
    local roman_numerals = {
        {1000, "M"},
        {900, "CM"},
        {500, "D"},
        {400, "CD"},
        {100, "C"},
        {90, "XC"},
        {50, "L"},
        {40, "XL"},
        {10, "X"},
        {9, "IX"},
        {5, "V"},
        {4, "IV"},
        {1, "I"}
    }
    
    local result = ""
    for _, pair in ipairs(roman_numerals) do
        local value, symbol = pair[1], pair[2]
        while val >= value do
            result = result .. symbol
            val = val - value
        end
    end
    
    return result
end

function ffi_message(title, message, type, info)
    printf("!FE: Calling FFI! Title: s%, Message: s%, Type: s%, Info: s%", title, message, type, info)
    if db.actor:has_info(info) then return end -- show message only once.

    give_info(info)
    local ffi = require("ffi")
	local lib = ffi.load("user32")  -- Windows DLL  
	ffi.cdef[[  
	    int MessageBoxA(void* hWnd, const char* text, const char* caption, int type);  
	]]  
	lib.MessageBoxA(nil, message, title, type)
end

----------------------------------------------------------------------------------------------------
-- Helper functions
----------------------------------------------------------------------------------------------------

function failsafe(obj)
    if not obj or not item_device.dev_items[obj:id()] then return false end
    return true
end

function reboot_call(seconds)
	fatal_error_mcm.REBOOT = seconds
	fatal_error_mcm.process_pda_call()	
end

function invoke(name, time, action)
	CreateTimeEvent("fe_time_event", name, time, function() action() return true end)
end

----------------------------------------------------------------------------------------------------
-- Other
----------------------------------------------------------------------------------------------------

function save_state(m_data)
    m_data.security_key = SECURITY_KEY
end

function load_state(m_data)
    SECURITY_KEY = m_data.security_key
end

function on_game_start()

    RegisterScriptCallback("save_state", save_state)
    RegisterScriptCallback("load_state", load_state)
    RegisterScriptCallback("actor_on_first_update", read_log)

	if not SECURITY_KEY then
		SECURITY_KEY = generate_random_string(20)
	end

    mac_mcm.add_blocked_tabs({"eptReboot","eptBSOD","eptBroken","eptMonolith","eptMonolithHackers","eptBlocked","eptBios","eptBiosBoot","eptBiosDebug",})
    mac_mcm.add_app("app_bios", {name = "BIOS", texture = "settings", tab = "eptBios"})
    exec_console_cmd("g_3d_pda 1")

    if not item_device.dev_items then
        assert(false, game.translate_string("st_fe_item_device"))
    end
    
    if get_aoe_version then
        IS_AOE = true
        return
    end

    if get_modded_exes_version() < 20250823 then
        assert(false, game.translate_string("st_fe_modded_exes"))
    end

end