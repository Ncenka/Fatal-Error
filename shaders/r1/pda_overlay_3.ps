#include "common.h"

struct v2p
{
    float2 tc0: TEXCOORD0;
    float4 c0: COLOR0;
};

float cheap_rand(float2 uv) {
    return frac(0.5 + 0.5 * dot(uv, float2(12.9898, 78.233)));
}

// Основные параметры
#define EFFECTS_MULTIPLIER 1.40 // Общий множитель интенсивности эффектов
#define ARTIFACT_THRESHOLD 0.20  // Порог активации артефактов (0-1)
#define ARTIFACT_CHANCE 0.99     // Шанс появления артефактов (тем меньше, тем чаще)

// Параметры для RGB-сдвига
#define GLITCH_INTENSITY 20.0
#define GLITCH_DIVISOR 100.0

// Параметры смещения каналов (горизонтальное, вертикальное)
#define CHANNEL_R_OFFSET float2(-1.0, 0.4) // X, Y смещение для красного
#define CHANNEL_G_OFFSET float2(1.0, 0.4)  // X, Y смещение для зеленого
#define CHANNEL_B_OFFSET float2(0.0, -1.0) // X, Y смещение для синего

sampler2D s_pdascreen;
float4 pda_params; // x:alpha, y:glitch_amount, z:brightness

// RGB-сдвиг с учетом множителя интенсивности
float3 glitchClassic(float2 tc, float intensity)
{
    float3 img = float3(0, 0, 0);
    
    // Базовый глитч
    float amount = cheap_rand(timers.x) * GLITCH_INTENSITY * intensity;
    amount *= sqrt(cheap_rand(tc.y));
	amount *= noise(tc);
    amount /= GLITCH_DIVISOR;

    // Рассчитываем смещения для каждого канала
    float2 offsetR = CHANNEL_R_OFFSET * amount;
    float2 offsetG = CHANNEL_G_OFFSET * amount;
    float2 offsetB = CHANNEL_B_OFFSET * amount;

    img.r = tex2D(s_pdascreen, tc + offsetR).r;
    img.g = tex2D(s_pdascreen, tc + offsetG).g;
    img.b = tex2D(s_pdascreen, tc + offsetB).b;
    
    if (intensity > ARTIFACT_THRESHOLD)
    {
        // Случайные артефакты
        if (cheap_rand(timers.x) > ARTIFACT_CHANCE)
        {
            img = float3(0, 0, 0); // черные вспышки
        }
    }

    return img;
}

float4 main(v2p I): COLOR
{
    // Рассчитываем итоговую интенсивность эффектов
    float effectsIntensity = pda_params.y * EFFECTS_MULTIPLIER;
    
    // Берем оригинальное изображение
    float4 original = tex2D(s_pdascreen, I.tc0);
    
    // Применяем глитч-эффекты
    float3 glitched = glitchClassic(I.tc0, effectsIntensity);
    
    // Смешивание с оригиналом
    float3 finalColor = lerp(original.rgb, glitched, effectsIntensity);
    
    // Финальная коррекция яркости и прозрачности
    return float4(finalColor * pda_params.z, pda_params.x);
}