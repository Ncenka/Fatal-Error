function item_device.drain_device(obj, sec, loss, loss_add)
	if not (obj and loss and loss ~= 0) then
		return
	end
	
	sec = sec or obj:section()
	
	-- Device goes off on critical power, no draining
	local cond = obj:condition()
	if cond < item_device.dev_critical[sec] then
		--print_dbg("[%s] power is too low: %s", obj:name(), cond)
		return false
	end
	
	if loss_add then
		loss = loss + loss_add
	end
	
	-- Set up new power
	local factor = game_difficulties.get_eco_factor("battery_consumption")
	local battery = ini_sys:r_string_ex(sec,"battery")
	local amper_amount = ini_sys:r_float_ex(battery,"amper_amount") or 540
	
	if db.actor:has_info("bios_overclock") and sec:find("device_pda_") then
		factor = factor + 10
	end
	
	loss = loss * factor
	loss = loss / amper_amount
	
	local cond_n = cond - loss
	cond_n = clamp(cond_n, 0.0001, 0.9999)
	
	obj:set_condition(cond_n)
	--print_dbg("[%s] | power loss: %s | remaining power: %s", obj:name(), loss, cond_n)
	
	return true -- if drain happened
end