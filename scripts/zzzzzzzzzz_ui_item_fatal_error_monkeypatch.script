----------------------------------------------------------------------------------------------------
-- Auto-Localization-Patch-Detector
----------------------------------------------------------------------------------------------------

local function ALPD(string_id)

    local localized_string = game.translate_string(string_id)
    
    if localized_string ~= string_id then
        return true
	else
		return false
    end
end

----------------------------------------------------------------------------------------------------
-- Monkeypatch
----------------------------------------------------------------------------------------------------

function create_overrides_fatal_error_v2()	
	local fe_override_one = ui_item.build_desc_footer
    ui_item.build_desc_footer = function (obj, sec, str)
		
		local _str = ""
		
		-- PDA generation
		if sec:find("device_pda") or sec:find("itm_pda") then
			local unit = fe_utils.to_roman(ini_sys:r_float_ex(sec,"tier"))
			_str = _str .. utils_xml.get_color("d_purple") .. "  • " .. utils_xml.get_color("ui_gray_2") .. " " .. game.translate_string("st_pda_gen") .. " " .. utils_xml.get_color("ui_gray_1") .. unit .. " \\n"
		end

		-- Shown Squads
		if IsItem("device",sec) then
			local show_map_squads = ini_sys:r_string_ex(sec,"show_map_squads")
			if show_map_squads then
				local unit = game.translate_string("st_show_map_squads_error")
				if (show_map_squads == "all") then
					unit = game.translate_string("st_show_map_squads_all")
				elseif (show_map_squads == "neutral") then
					unit = game.translate_string("st_show_map_squads_neutral")
				elseif (show_map_squads == "faction") then
					unit = game.translate_string("st_show_map_squads_faction")
				elseif (show_map_squads == "enemies") then
					unit = game.translate_string("st_show_map_squads_enemies")
				end
				
				_str = _str .. utils_xml.get_color("d_purple") .. "  • " .. utils_xml.get_color("ui_gray_2") .. " " .. unit .. " \\n"
			end
		end
		
		-- Beep Sound
		if IsItem("device",sec) then
			local can_beep = ini_sys:r_bool_ex(sec,"can_beep")
			if can_beep == true then
				local unit = game.translate_string("st_can_beep")				
				_str = _str .. utils_xml.get_color("d_purple") .. "  • " .. utils_xml.get_color("ui_gray_2") .. " " .. unit .. " \\n"
			end
		end

		-- Cannot Break
		if IsItem("device",sec) then
			local can_break = ini_sys:r_bool_ex(sec,"can_break")
			if can_break == false then
				local unit = game.translate_string("st_can_break")				
				_str = _str .. utils_xml.get_color("d_purple") .. "  • " .. utils_xml.get_color("ui_gray_2") .. " " .. unit .. " \\n"
			end
		end
		
		-- Battery Type
		if IsItem("device",sec) then
			local battery = ini_sys:r_string_ex(sec,"battery") -- right battery
			if battery then
				local unit = game.translate_string("st_batt_error")
				if (battery == "batteries_dead") then
					unit = game.translate_string("st_batt_aaa")
				elseif (battery == "batteries_aa") then
					unit = game.translate_string("st_batt_aa")
				elseif (battery == "batteries_d") then
					unit = game.translate_string("st_batt_d")
				elseif (battery == "batteries_f") then
					unit = game.translate_string("st_batt_f")
				elseif (battery == "none") then
					unit = game.translate_string("st_batt_none")
				end
				
				_str = _str .. utils_xml.get_color("d_purple") .. "  • " .. utils_xml.get_color("ui_gray_2") .. " " .. game.translate_string("st_batt") .. " " .. utils_xml.get_color("ui_gray_1") .. unit .. " \\n"
			end
		end
		
		-- Amper Amount
		if IsItem("battery",sec) or ini_sys:r_string_ex(sec,"battery") == "none" then
			local amper_amount = ini_sys:r_float_ex(sec,"amper_amount")
			if amper_amount then
				local unit = game.translate_string("st_mah")			
				_str = _str .. utils_xml.get_color("d_purple") .. "  • " .. utils_xml.get_color("ui_gray_2") .. " " .. game.translate_string("st_amper") .. " " .. utils_xml.get_color("ui_gray_1") .. amper_amount .." ".. unit .. " \\n"
			end
		end

		-- Interactive
		if IsItem("device",sec) and not sec:find("itm_pda_") then
			local tab_interactive = ini_sys:r_bool_ex(sec,"tab_interactive")
			if tab_interactive == false and ALPD("ui_mcm_menu_pda_inter") then
				local unit = game.translate_string("st_interactive_unavaible")
				_str = _str .. utils_xml.get_color("d_red") .. "  • " .. utils_xml.get_color("ui_gray_2") .. " " .. unit .. " \\n"
			end
		end

		-- Taskboard
		if IsItem("device",sec) and not sec:find("itm_pda_") then
			local tab_taskboard = ini_sys:r_bool_ex(sec,"tab_taskboard")
			if tab_taskboard == false and ALPD("ui_mcm_menu_pda_taskboard") then
				local unit = game.translate_string("st_taskboard_unavaible")
				_str = _str .. utils_xml.get_color("d_red") .. "  • " .. utils_xml.get_color("ui_gray_2") .. " " .. unit .. " \\n"
			end
		end

		-- Device Broken
		if IsItem("device",sec) and fe_utils.is_broken(obj) then
			local unit = game.translate_string("st_broken")			
			_str = _str .. utils_xml.get_color("d_red") .. "  • " .. utils_xml.get_color("ui_gray_2") .. " " .. unit .. " \\n"
		end
		
		-- Device Damaged
		if IsItem("device",sec) and fe_utils.get_screen_damage(obj) > 0 then
			local unit = game.translate_string("st_damaged")			
			_str = _str .. utils_xml.get_color("d_red") .. "  • " .. utils_xml.get_color("ui_gray_2") .. " " .. unit .. " \\n"
		end
		
		str = str .. _str
		
		return fe_override_one(obj, sec, str)
	end
	
	local fe_override_two = ui_item.build_name_first
    ui_item.build_name_first = function (obj, sec, str)
	
		local _str = ""
		
		if IsItem("device",sec) and fe_utils.is_broken(obj) then
			local unit = game.translate_string("st_broken_header")			
			_str = _str .. " " .. unit 
		end
		
		if IsItem("device",sec) and fe_utils.get_screen_damage(obj) > 0 then
			local unit = game.translate_string("st_damaged_header")			
			_str = _str .. " " .. unit 
		end

		if IsItem("device",sec) and ini_sys:r_bool_ex(sec,"encrypted") == true then
			local unit = game.translate_string("st_encrypted_header")			
			_str = _str .. " " .. unit 
		end
	
		str = str .. _str
	
		return fe_override_two(obj, sec, str)
	end
end

function on_game_start()
	RegisterScriptCallback("on_game_load", create_overrides_fatal_error_v2)
end