local SINGLETON = nil
local pda
local pda_int
local beep
local taskboard
local interact
local interface
local color
local hint_text = {
    text1_l = "Current system time (read-only).",
    text2_l = "Current system date (read-only).",
    username = "Current user account name.",
    detected_cpu = "Processor model and specifications.",
    me_version = "Version of modified game executables. Must be 20250823 or higher.",
    pda_name = "Model of your PDA device.",
    oper_sys_name = "Detected operating system.",
    beep = "Toggles PDA beep sound when nearby stalkers are in range. Only available on high-tier PDAs.",
    s_key = "Unique security key for this PDA. DO NOT SHARE.",
    taskboard = "Taskboard addon status and PDA compatibility.",
    interact = "PDA Interactive addon status and PDA compatibility.",
    razgon = "WARNING: Overclocking this device may result in:\\n \\n   1. Increased power consumption\\n   2. System instability\\n   3. Potential hardware damage \\n \\nPotential benefits:\\n \\n   1. Improved signal processing\\n   2. Protection from Fatal Errors",
	interface = "PDA User Interface XML File. Software update required to install custom User Interface.",
}

function get_ui()
	SINGLETON = SINGLETON or pda_bios_tab()
	SINGLETON:Reset()
	return SINGLETON
end

class "pda_bios_tab" (CUIScriptWnd)
function pda_bios_tab:__init() super()
    self:InitControls()
	self:InitCallbacks()
end

function pda_bios_tab:__finalize()
end

function pda_bios_tab:InitControls()
    self:SetWndRect(Frect():set(0,0,1024,768))
	local xml               		= CScriptXmlInit()
	xml:ParseFile("pda_errors.xml")
	self.form						= xml:InitStatic("pda_empty_tab",self)
	
	self.picture					= xml:InitStatic("picture_base",self.form)
	
	if fe_utils.IS_AOE == true then
		self.picture:InitTexture ("ui\\mnogopotok_dark")
	else
		self.picture:InitTexture ("ui\\blue_screen")
	end
	
	self.picture2					= xml:InitStatic("bios",self)
	self.picture2:InitTexture ("ui\\bios_setup1")
	self.upper_text 		= xml:InitTextWnd("bios:upper_text", self)
	self.bottom_text 		= xml:InitTextWnd("bios:bottom_text", self)
	
	self.main = xml:Init3tButton("bios:main", self)
	self:Register(self.main, "main")
	
	self.boot = xml:Init3tButton("bios:boot", self)
	self:Register(self.boot, "boot")

	if DEV_DEBUG or DEV_DEBUG_DEV then
		self.debug = xml:Init3tButton("bios:debug", self)
		self:Register(self.debug, "debug")
	end
	
	self.button_1 = xml:Init3tButton("bios:button_1", self)
	self.text1_l 		= xml:InitTextWnd("bios:text1_l", self)
	self.text1_r 	= xml:InitTextWnd("bios:text1_r", self)
	
	self.button_2 = xml:Init3tButton("bios:button_2", self)
	self.text2_l 		= xml:InitTextWnd("bios:text2_l", self)
	self.text2_r 	= xml:InitTextWnd("bios:text2_r", self)
	
	self.username_button = xml:Init3tButton("bios:username_button", self)
	self.username 			= xml:InitTextWnd("bios:username", self)
	self.username_username 	= xml:InitTextWnd("bios:username_username", self)
	
	self.detected_cpu_button = xml:Init3tButton("bios:detected_cpu_button", self)
	self.detected_cpu 		= xml:InitTextWnd("bios:detected_cpu", self)
	self.detected_cpu_cpu 	= xml:InitTextWnd("bios:detected_cpu_cpu", self)
	
	self.me_version_button = xml:Init3tButton("bios:me_version_button", self)
	self.me_version 		= xml:InitTextWnd("bios:me_version", self)
	self.me_version_version = xml:InitTextWnd("bios:me_version_version", self)
	
	self.pda_name_button = xml:Init3tButton("bios:pda_name_button", self)
	self.pda_name 			= xml:InitTextWnd("bios:pda_name", self)
	self.pda_name_name		= xml:InitTextWnd("bios:pda_name_name", self)
	
	self.oper_sys_name_button = xml:Init3tButton("bios:oper_sys_name_button", self)
	self.oper_sys_name 		= xml:InitTextWnd("bios:oper_sys_name", self)
	self.oper_sys_name_name	= xml:InitTextWnd("bios:oper_sys_name_name", self)
	
	self.beep_button		= xml:Init3tButton("bios:beep_button", self)
	self:Register(self.beep_button, "beep_button")
	self.beep 				= xml:InitTextWnd("bios:beep", self)
	self.beep_enable		= xml:InitTextWnd("bios:beep_enable", self)
	
	self.s_key_button 		= xml:Init3tButton("bios:s_key_button", self)
	self.s_key 				= xml:InitTextWnd("bios:s_key", self)
	self.s_key_key			= xml:InitTextWnd("bios:s_key_key", self)
	
	self.taskboard_button 	= xml:Init3tButton("bios:taskboard_button", self)
	self.taskboard 			= xml:InitTextWnd("bios:taskboard", self)
	self.taskboard_task 	= xml:InitTextWnd("bios:taskboard_task", self)
	
	self.interact_button 	= xml:Init3tButton("bios:interact_button", self)
	self.interact 			= xml:InitTextWnd("bios:interact", self)
	self.interact_interact	= xml:InitTextWnd("bios:interact_interact", self)
	
	self.razgon_button 		= xml:Init3tButton("bios:razgon_button", self)
	self:Register(self.razgon_button, "razgon_button")
	self.razgon 			= xml:InitTextWnd("bios:razgon", self)
	self.razgon_razgon		= xml:InitTextWnd("bios:razgon_razgon", self)

	self.interface_button 	= xml:Init3tButton("bios:interface_button", self)
	self:Register(self.interface_button, "interface_button")
	self.interface 			= xml:InitTextWnd("bios:interface", self)
	self.interface_interface = xml:InitTextWnd("bios:interface_interface", self)
	
	self.hint 				= xml:InitTextWnd("bios:hint", self)
	self.help 				= xml:InitTextWnd("bios:help", self)
end

function pda_bios_tab:Update()
	CurrentTime = os.date("%H:%M:%S")
	self.text1_r:SetText("[" .. CurrentTime .. "]")
	
	local elements = {
        { button = self.button_1, 				id = "text1_l" },
        { button = self.button_2, 				id = "text2_l" },
        { button = self.username_button,    	id = "username" },
        { button = self.detected_cpu_button,    id = "detected_cpu" },
        { button = self.me_version_button,   	id = "me_version" },
        { button = self.pda_name_button,    	id = "pda_name" },
        { button = self.oper_sys_name_button,   id = "oper_sys_name" },
        { button = self.beep_button,    		id = "beep" },
        { button = self.s_key_button,    		id = "s_key" },
        { button = self.taskboard_button,    	id = "taskboard" },
        { button = self.interact_button,    	id = "interact" },
        { button = self.razgon_button,    		id = "razgon" },
		{ button = self.interface_button,    	id = "interface" },
    }
	
	local hint_shown = false
    for _, elem in ipairs(elements) do
        if elem.button:IsCursorOverWindow() then
            self.hint:SetText(hint_text[elem.id])
            self.hint:Show(true)
            hint_shown = true
            break
        end
    end
	
	if not hint_shown then
        self.hint:Show(false)
    end
	
	CUIScriptWnd.Update(self)
end

function pda_bios_tab:InitCallbacks()
	self:AddCallback("beep_button",			ui_events.BUTTON_CLICKED, self.On_beep_button,		self)
	self:AddCallback("razgon_button",		ui_events.BUTTON_CLICKED, self.On_razgon_button,	self)
	self:AddCallback("interface_button",	ui_events.BUTTON_CLICKED, self.On_interface_button,	self)
	self:AddCallback("boot",				ui_events.BUTTON_CLICKED, self.On_boot,				self)
	self:AddCallback("debug",				ui_events.BUTTON_CLICKED, self.On_debug,			self)
end

function pda_bios_tab:On_boot()
	ActorMenu.get_pda_menu():SetActiveSubdialog("eptBiosBoot")
end

function pda_bios_tab:On_debug()
	ActorMenu.get_pda_menu():SetActiveSubdialog("eptBiosDebug")
end

function pda_bios_tab:On_beep_button()
	xr_sound.set_sound_play(AC_ID, "pda_alarm")
	if db.actor:has_info("bios_can_beep") then
		disable_info("bios_can_beep")
	else
		give_info("bios_can_beep")
	end
	if db.actor:has_info("bios_can_beep") then
		beep = "[Enabled]"
	else
		beep = "[Disabled]"
	end
	if ini_sys:r_bool_ex(pda:section(),"can_beep") == true then
		beep = beep .. " \\n" .. "[Supported]"
	else
		beep = beep .. " \\n" .. "[Unsupported]"
	end
	self.beep_enable:SetText(beep)
end

function pda_bios_tab:On_razgon_button()
	local pda_id = pda:id()
	if item_device.dev_items[pda_id].is_overclocked == true then
		item_device.dev_items[pda_id].is_overclocked = false
		self.razgon_razgon:SetText("[Disabled]")
		xr_sound.set_sound_play(AC_ID, "pda_alarm")
	else
		item_device.dev_items[pda_id].is_overclocked = true
		self.razgon_razgon:SetText("[Enabled]")
		xr_sound.set_sound_play(AC_ID, "pda_alarm")
	end
end

function pda_bios_tab:On_interface_button()

	if not pda:has_upgrade("up_thirda_pda") then return end

	local pda_id = pda:id()
	xr_sound.set_sound_play(AC_ID, "pda_alarm")
	local pda_xml = item_device.dev_items[pda_id].interface

	if pda_xml == "pda" then
		item_device.dev_items[pda_id].interface = "pda_zero"
	elseif pda_xml == "pda_zero" then
		item_device.dev_items[pda_id].interface = "pda_one"
	elseif pda_xml == "pda_one" then
		item_device.dev_items[pda_id].interface = "pda_two"
	else
		item_device.dev_items[pda_id].interface = "pda"
	end

	fatal_error_mcm.REBOOT = math.random(2,5)
	ActorMenu.get_pda_menu():SetActiveSubdialog("eptReboot")
	fe_utils.invoke("set_pda_xml", 1, function() fe_utils.set_pda_xml(pda) end)

end

function pda_bios_tab:Reset()

	self.upper_text:SetText("Monolith - OS Setup")
    self.upper_text:Show(true)
	
	if fe_utils.IS_AOE == false then
		self.bottom_text:SetText("Version 1.7.8 Copyright (C) 2025 S.P.E.C.T.R. Development Team")
    	self.bottom_text:Show(true)
	end
	
	----------------------------------------------------------------------------------------------------
	-- BIOS Options
	----------------------------------------------------------------------------------------------------
	
	pda = db.actor:item_in_slot(8)
	pda_id = pda:id()
	pda_sec = pda:section()

	self.text1_l:SetText("System Time: ")
	self.text1_l:SetTextColor(GetARGB(255, 100, 200, 255))
    self.text1_l:Show(true)
	
	self.text1_r:SetText("[" .. os.date("%H:%M:%S") .. "]")
	self.text1_r:SetTextColor(GetARGB(255, 255, 255, 255))
    self.text1_r:Show(true)
	
	self.text2_l:SetText("System Date: ")
	self.text2_l:SetTextColor(GetARGB(255, 100, 200, 255))
    self.text2_l:Show(true)
	
	self.text2_r:SetText("[" .. os.date("%m/%d/%Y") .. "]")
	self.text2_r:SetTextColor(GetARGB(255, 255, 255, 255))
    self.text2_r:Show(true)
	
	self.username:SetText("Username: ")
	self.username:SetTextColor(GetARGB(255, 100, 200, 255))
    self.username:Show(true)
	
	self.username_username:SetText(os.getenv("USERNAME"))
	self.username_username:SetTextColor(GetARGB(255, 255, 255, 255))
    self.username_username:Show(true)
	
	self.detected_cpu:SetText("Processor Information: ")
	self.detected_cpu:SetTextColor(GetARGB(255, 100, 200, 255))
    self.detected_cpu:Show(true)
	
	self.detected_cpu_cpu:SetText(fe_utils.LOG_LINES[1]:match(": (.*GHz)"))
	self.detected_cpu_cpu:SetTextColor(GetARGB(255, 255, 255, 255))
    self.detected_cpu_cpu:Show(true)
	
	self.me_version:SetText("Modded Exes Version: ")
	self.me_version:SetTextColor(GetARGB(255, 100, 200, 255))
    self.me_version:Show(true)
	
	self.me_version_version:SetText("[" .. get_modded_exes_version() .. "]")
	self.me_version_version:SetTextColor(GetARGB(255, 255, 255, 255))
    self.me_version_version:Show(true)
	
	self.pda_name:SetText("PDA Model: ")
	self.pda_name:SetTextColor(GetARGB(255, 100, 200, 255))
    self.pda_name:Show(true)
	
	self.pda_name_name:SetText("[" .. string.upper(pda_sec) .. "]")
	self.pda_name_name:SetTextColor(GetARGB(255, 255, 255, 255))
    self.pda_name_name:Show(true)
	
	self.oper_sys_name:SetText("Operating System: ")
	self.oper_sys_name:SetTextColor(GetARGB(255, 100, 200, 255))
    self.oper_sys_name:Show(true)
	
	self.oper_sys_name_name:SetText(os.getenv("OS") or "Unknown")
	self.oper_sys_name_name:SetTextColor(GetARGB(255, 255, 255, 255))
    self.oper_sys_name_name:Show(true)
	
	self.beep:SetText("Beep Sound: ")
	self.beep:SetTextColor(GetARGB(255, 100, 200, 255))
    self.beep:Show(true)
	
	if db.actor:has_info("bios_can_beep") then
		beep = "[Enabled]"
	else
		beep = "[Disabled]"
	end
	if ini_sys:r_bool_ex(pda_sec,"can_beep") == true then
		beep = beep .. " \\n" .. "[Supported]"
	else
		beep = beep .. " \\n" .. "[Unsupported]"
	end
	self.beep_enable:SetText(beep)
	self.beep_enable:SetTextColor(GetARGB(255, 100, 200, 255))
    self.beep_enable:Show(true)
	
	self.s_key:SetText("Unique Security Key: ")
	self.s_key:SetTextColor(GetARGB(255, 100, 200, 255))
    self.s_key:Show(true)
	
	self.s_key_key:SetText(fe_utils.SECURITY_KEY)
	self.s_key_key:SetTextColor(GetARGB(255, 255, 255, 255))
    self.s_key_key:Show(true)
	
	self.taskboard:SetText("Taskboard: ")
	self.taskboard:SetTextColor(GetARGB(255, 100, 200, 255))
    self.taskboard:Show(true)
	
	if fe_utils.IS_TASKBOARD then
		taskboard = "[Enabled]"
	else
		taskboard = "[Disabled]"
	end
	if ini_sys:r_bool_ex(pda_sec,"tab_taskboard") == true then
		taskboard = taskboard .. " \\n" .. "[Supported]"
	else
		taskboard = taskboard .. " \\n" .. "[Unsupported]"
	end
	self.taskboard_task:SetText(taskboard)
	self.taskboard_task:SetTextColor(GetARGB(255, 255, 255, 255))
    self.taskboard_task:Show(true)
	
	self.interact:SetText("Interactive: ")
	self.interact:SetTextColor(GetARGB(255, 100, 200, 255))
    self.interact:Show(true)
	
	if fe_utils.IS_INTERACTIVE then
		interact = "[Enabled]"
	else
		interact = "[Disabled]"
	end
	if ini_sys:r_bool_ex(pda_sec,"tab_interactive") == true then
		interact = interact .. " \\n" .. "[Supported]"
	else
		interact = interact .. " \\n" .. "[Unsupported]"
	end
	self.interact_interact:SetText(interact)
	self.interact_interact:SetTextColor(GetARGB(255, 255, 255, 255))
    self.interact_interact:Show(true)
	
	self.razgon:SetText("Overclock: ")
	self.razgon:SetTextColor(GetARGB(255, 100, 200, 255))
    self.razgon:Show(true)
	
	if item_device.dev_items[pda_id].is_overclocked == true then
		self.razgon_razgon:SetText("[Enabled]")
	else
		self.razgon_razgon:SetText("[Disabled]")
	end
	self.razgon_razgon:SetTextColor(GetARGB(255, 100, 200, 255))
    self.razgon_razgon:Show(true)

	self.interface:SetText("User Interface: ")
	self.interface:SetTextColor(GetARGB(255, 100, 200, 255))
    self.interface:Show(true)

	if pda:has_upgrade("up_thirda_pda") then 
		interface = "[Supported]"
		color = {255, 100, 200, 255}
	else
		interface = "[Unsupported]"
		color = {255, 255, 255, 255}
	end
	pda_int = item_device.dev_items[pda_id].interface
	pda_int = string.upper(pda_int)
	self.interface_interface:SetText("[" .. pda_int .. "]" .. " \\n" .. interface)
	self.interface_interface:SetTextColor(GetARGB(color[1], color[2], color[3], color[4]))
    self.interface_interface:Show(true)
	
	----------------------------------------------------------------------------------------------------
	-- BIOS Hints
	----------------------------------------------------------------------------------------------------
	
	self.hint:Show(false)
	self.hint:SetTextColor(GetARGB(255, 100, 200, 255))
	
	self.help:Show(true)
	self.help:SetText("Item Specific Help")
	self.hint:SetTextColor(GetARGB(255, 100, 200, 255))
	
	local pda_menu = ActorMenu.get_pda_menu()
	pda_menu:GetTabControl():Show(false)
end