settings = {
    pda = {
        die_chance = {
            emission = {5, 4, 3, 2, 1},
            electra = {25, 20, 15, 10, 5},
            radiation = {1, 0.75, 0.50, 0.25, 0.10},
            timed_error = {25, 20, 15, 10, 5}
        },
	},
    other = {
		passive_glitch_value = 0.01,
		damage_chance = 2,
		timed_error_min_time = 30,
		timed_error_max_time = 60,
		beep_radius = 50,
        radiation = {
            amount_to_fry = 1,
            glitch_scale = 0.1,
            scale = 1,
            amount_lower = 0.01,
        },
    },
    devices = {
        die_chance = {
            emission = 5,
            electra = 15,
            radiation = 0.10
        }
    },
	reboot_key = DIK_keys.DIK_M
}

local triggers = {
    emission = {delay = 60, last_check = 0},
	radiation = {delay = 1, last_check = 0},
	pda_error = {delay = 60, last_check = 0},
}

local timed_error = 0
local timed_error_protection = 0
local radiation_amount = 0

local pda_list = { 
"device_pda_0", "device_pda_0_damaged1", "device_pda_0_damaged2", "device_pda_0_damaged3", "device_pda_0_damaged4", "device_pda_0_damaged5",
"device_pda_1", "device_pda_1_damaged1", "device_pda_1_damaged2", "device_pda_1_damaged3", "device_pda_1_damaged4", "device_pda_1_damaged5",
"device_pda_2", "device_pda_2_damaged1", "device_pda_2_damaged2", "device_pda_2_damaged3", "device_pda_2_damaged4", "device_pda_2_damaged5",
"device_pda_3", "device_pda_3_damaged1", "device_pda_3_damaged2", "device_pda_3_damaged3", "device_pda_3_damaged4", "device_pda_3_damaged5",
"device_pda_milspec", "device_pda_milspec_damaged1", "device_pda_milspec_damaged2", "device_pda_milspec_damaged3", "device_pda_milspec_damaged4", "device_pda_milspec_damaged5"
}

local devices_list = {
"detector_anomaly", "detector_radio", "detector_geiger", "device_flashlight",
"detector_simple", "detector_advanced", "detector_elite", "detector_scientific", "detector_simple_up", "detector_advanced_up", "detector_elite_up", "detector_scientific_up",
"device_torch_dummy", "device_torch_nv_1", "device_torch_nv_2", "device_torch_nv_3", "device_torch_nv_4"
}

----------------------------------------------------------------------------------------------------
-- Mod Configuration Menu
----------------------------------------------------------------------------------------------------

function on_mcm_load()
	options = { 
		id = "fatal_error", gr= {
			{id = "fatal_error_pda_frying", sh = true, gr= {
				{ id = "chance_for_pda0_to_die", type="track", val = 2, min = 0, max = 100, step = 1, def = 5 },
				{ id = "chance_for_pda1_to_die", type="track", val = 2, min = 0, max = 100, step = 1, def = 4 },
				{ id = "chance_for_pda2_to_die", type="track", val = 2, min = 0, max = 100, step = 1, def = 3 },
				{ id = "chance_for_pda3_to_die", type="track", val = 2, min = 0, max = 100, step = 1, def = 2 },
				{ id = "chance_for_milspec_to_die", type="track", val = 2, min = 0, max = 100, step = 1, def = 1 },
				{ id = "chance_for_pda0_to_die_electra", type="track", val = 2, min = 0, max = 100, step = 1, def = 25 },
				{ id = "chance_for_pda1_to_die_electra", type="track", val = 2, min = 0, max = 100, step = 1, def = 20 },
				{ id = "chance_for_pda2_to_die_electra", type="track", val = 2, min = 0, max = 100, step = 1, def = 15 },
				{ id = "chance_for_pda3_to_die_electra", type="track", val = 2, min = 0, max = 100, step = 1, def = 10 },
				{ id = "chance_for_milspec_to_die_electra", type="track", val = 2, min = 0, max = 100, step = 1, def = 5 },
				{ id = "chance_for_pda0_to_die_radiation", type="track", val = 2, min = 0, max = 1, step = 0.01, def = 1 },
				{ id = "chance_for_pda1_to_die_radiation", type="track", val = 2, min = 0, max = 1, step = 0.01, def = 0.75 },
				{ id = "chance_for_pda2_to_die_radiation", type="track", val = 2, min = 0, max = 1, step = 0.01, def = 0.50 },
				{ id = "chance_for_pda3_to_die_radiation", type="track", val = 2, min = 0, max = 1, step = 0.01, def = 0.25 },
				{ id = "chance_for_milspec_to_die_radiation", type="track", val = 2, min = 0, max = 1, step = 0.01, def = 0.10 },
				{ id = "chance_for_pda0_to_timed_error", type="track", val = 2, min = 0, max = 100, step = 1, def = 25 },
				{ id = "chance_for_pda1_to_timed_error", type="track", val = 2, min = 0, max = 100, step = 1, def = 20 },
				{ id = "chance_for_pda2_to_timed_error", type="track", val = 2, min = 0, max = 100, step = 1, def = 15 },
				{ id = "chance_for_pda3_to_timed_error", type="track", val = 2, min = 0, max = 100, step = 1, def = 10 },
				{ id = "chance_for_milspec_to_timed_error", type="track", val = 2, min = 0, max = 100, step = 1, def = 5 },
			},},
			{id = "fatal_error_devices_frying", sh = true, gr= {
				{ id = "chance_for_devices_to_die", type="track", val = 2, min = 0, max = 100, step = 1, def = 5 },
				{ id = "chance_for_devices_to_die_electra", type="track", val = 2, min = 0, max = 100, step = 1, def = 15 },
				{ id = "chance_for_devices_to_die_radiation", type="track", val = 2, min = 0, max = 1, step = 0.01, def = 0.10 },
			},},
			{id = "fatal_error_pda_other_settings", sh = true, gr= {
				{ id = "passive_glitch_value", type="track", val = 2, min = 0, max = 1, step = 0.01, def = 0.01 },
				{ id = "pda_can_sgoret_delay", type="track", val = 2, min = 10, max = 120, step = 10, def = 60 },
				{ id = "fry_pda_from_radiation_delay", type="track", val = 2, min = 1, max = 60, step = 1, def = 1 },
				{ id = "radiation_glitch_scale", type="track", val = 2, min = 0, max = 1, step = 0.1, def = 0.1 },
				{ id = "radiation_scale", type="track", val = 2, min = 0, max = 10, step = 0.01, def = 1 },
				{ id = "radiation_amount_lower", type="track", val = 2, min = 0, max = 1, step = 0.01, def = 0.01 },
				{ id = "radiation_amount_to_fry", type="track", val = 2, min = 1, max = 10, step = 0.5, def = 1 },
				{ id = "chance_for_pda_to_damage", type="track", val = 2, min = 0, max = 100, step = 1, def = 2 },
				{ id = "timed_error_time_min", type="track", val = 2, min = 0, max = 600, step = 10, def = 30 },
				{ id = "timed_error_time_max", type="track", val = 2, min = 0, max = 600, step = 10, def = 60 },
				{ id = "beep_radius", type="track", val = 2, min = 5, max = 100, step = 1, def = 50 },
				{ id = "reboot_key", type = "key_bind", val = 2, def = DIK_keys.DIK_M},
			},},
		}
	}
		
	return options
end

function actor_on_first_update()
	if (ui_mcm) then 
	
		local pda_tiers = {"pda0", "pda1", "pda2", "pda3", "milspec"}
		
		for i, tier in ipairs(pda_tiers) do	
			settings.pda.die_chance.emission[i] = ui_mcm.get("fatal_error/fatal_error_pda_frying/chance_for_"..tier.."_to_die")
			settings.pda.die_chance.electra[i] = ui_mcm.get("fatal_error/fatal_error_pda_frying/chance_for_"..tier.."_to_die_electra")
			settings.pda.die_chance.radiation[i] = ui_mcm.get("fatal_error/fatal_error_pda_frying/chance_for_"..tier.."_to_die_radiation")
			settings.pda.die_chance.timed_error[i] = ui_mcm.get("fatal_error/fatal_error_pda_frying/chance_for_"..tier.."_to_timed_error")
		end

		settings.devices.die_chance.emission = ui_mcm.get("fatal_error/fatal_error_devices_frying/chance_for_devices_to_die")
		settings.devices.die_chance.electra = ui_mcm.get("fatal_error/fatal_error_devices_frying/chance_for_devices_to_die_electra")
		settings.devices.die_chance.radiation = ui_mcm.get("fatal_error/fatal_error_devices_frying/chance_for_devices_to_die_radiation")

		triggers.emission.delay = ui_mcm.get("fatal_error/fatal_error_pda_other_settings/pda_can_sgoret_delay")
		triggers.radiation.delay = ui_mcm.get("fatal_error/fatal_error_pda_other_settings/fry_pda_from_radiation_delay")
		
		settings.other.passive_glitch_value = ui_mcm.get("fatal_error/fatal_error_pda_other_settings/passive_glitch_value")
		settings.other.radiation.glitch_scale = ui_mcm.get("fatal_error/fatal_error_pda_other_settings/radiation_glitch_scale")
		settings.other.radiation.amount_to_fry = ui_mcm.get("fatal_error/fatal_error_pda_other_settings/radiation_amount_to_fry")
		settings.other.radiation.scale = ui_mcm.get("fatal_error/fatal_error_pda_other_settings/radiation_scale")
		settings.other.radiation.amount_lower = ui_mcm.get("fatal_error/fatal_error_pda_other_settings/radiation_amount_lower")
		settings.other.damage_chance = ui_mcm.get("fatal_error/fatal_error_pda_other_settings/chance_for_pda_to_damage")
		settings.other.timed_error_min_time = ui_mcm.get("fatal_error/fatal_error_pda_other_settings/timed_error_time_min")
		settings.other.timed_error_max_time = ui_mcm.get("fatal_error/fatal_error_pda_other_settings/timed_error_time_max")		
		settings.other.beep_radius = ui_mcm.get("fatal_error/fatal_error_pda_other_settings/beep_radius")
		settings.reboot_key = ui_mcm.get("fatal_error/fatal_error_pda_other_settings/reboot_key")
	end
end

RegisterScriptCallback("actor_on_first_update", actor_on_first_update)
RegisterScriptCallback("on_option_change", actor_on_first_update)

----------------------------------------------------------------------------------------------------
-- Help functions
----------------------------------------------------------------------------------------------------

function get_pda_name(item_name)
    if item_name:find("milspec") then
        return "device_pda_milspec"
    else
        return item_name:match("device_pda_%d")
    end
end

function get_pda_level(item_name)
    if item_name:find("device_pda_0") then return 1
    elseif item_name:find("device_pda_1") then return 2
    elseif item_name:find("device_pda_2") then return 3
    elseif item_name:find("device_pda_3") then return 4
    elseif item_name:find("device_pda_milspec") then return 5
    end
end

function check_trigger(name)
    local tg = time_global()
    if tg > triggers[name].last_check + triggers[name].delay * 1000 then
        triggers[name].last_check = tg
        return true
    end
    return false
end


local installed_upgr = {}
local inherit_item
function replace_item(old_item, new_item)
	installed_upgr = {}

    if type(old_item) == "number" then
        old_item = level.object_by_id(old_item)
    elseif type(old_item) == "string" then
        old_item = db.actor:object(old_item)
    end

	installed_upgr = utils_item.get_upgrades_installed(old_item)
	inherit_item = new_item
    local battery = old_item:condition()

    alife_release(old_item)
    alife_create_item(new_item, db.actor, {cond = battery})
	CreateTimeEvent("fe_time_event", "inherit_upgrades", 0.1, inherit_upgrades)
end

-- Fuck this function, FUCK FUCK IT
function inherit_upgrades()

	RemoveTimeEvent("fe_time_event", "inherit_upgrades")
	local obj
    
    local function inventory_iterator(actor, item)
        local section = item:section()
        if section:find(inherit_item) and not section:find("_broken") then
            if not utils_item.has_upgrades(item) then
                obj = item
            end
        end
    end
    
    db.actor:iterate_inventory(inventory_iterator, db.actor)

	inventory_upgrades.force_upgrade = true -- piece of shit
	if installed_upgr then
		for i=1,#installed_upgr do
			obj:install_upgrade(installed_upgr[i])
		end
    end
	inventory_upgrades.force_upgrade = false -- i hate you motherfucker
end

function fix_pda(broken_pda, fixed_pda, cost, first_speaker, second_speaker)
	replace_item(broken_pda, fixed_pda)
    news_manager.relocate_item(db.actor, "out", broken_pda)
    news_manager.relocate_item(db.actor, "in", fixed_pda)
    dialogs.relocate_money_from_actor(first_speaker, second_speaker, cost)
    news_manager.send_tip(db.actor, game.translate_string("st_pda_fix"), nil, default, 10000)
end

----------------------------------------------------------------------------------------------------
-- Break Devices \ PDA
----------------------------------------------------------------------------------------------------

function break_device(damage_type, upgrade)

    local available_devices = {}
    
    local function inventory_iterator(actor, item)
        local section = item:section()
        if (section:find("device_") or section:find("detector_")) 
		and not section:find("_broken")
		and not section:find("detector_geiger2") 
		and not section:find("device_pda_4") 
		and not section:find("device_pda_new") 
		then
            local has_upgrade = item:has_upgrade(upgrade)
            if not has_upgrade then
                table.insert(available_devices, {
                    id = item:id(),
                    section = section
                })
            end
        end
    end
    
    db.actor:iterate_inventory(inventory_iterator, db.actor)
    
   
    if #available_devices > 0 then

        local random_device = available_devices[math.random(1, #available_devices)]
		local chance, device_section

		if random_device.section:find("device_pda_") then
			local pda_level = get_pda_level(random_device.section)
        	chance = settings.pda.die_chance[damage_type][pda_level]
			device_section = get_pda_name(random_device.section)
		else
			chance = settings.devices.die_chance[damage_type]
			device_section = random_device.section
		end
        
        if db.actor:has_info("bios_overclock") then
            chance = chance * 2
        end
        
        local radiation_scale = 1
        if damage_type == "radiation" then
            radiation_scale = radiation_amount
        end
        
        if math.random(0, 100) < (radiation_scale * chance) then
            replace_item(random_device.id, device_section.."_broken")
            
            if damage_type == "radiation" then
                radiation_amount = radiation_amount * 0.50
            end
        end
    end
end

----------------------------------------------------------------------------------------------------
-- PDA Fix And Upgrade Costs
----------------------------------------------------------------------------------------------------

function no_upgrade_for_no_pda()
	if db.actor:item_in_slot(8) then
		return not mlr_utils.have_item("always_true", 1)
	end
end

function fix_pda_check_pda()
	return mlr_utils.have_item('device_pda_0_broken', 1) 
	or mlr_utils.have_item('device_pda_1_broken', 1) 
	or mlr_utils.have_item('device_pda_2_broken', 1) 
	or mlr_utils.have_item('device_pda_3_broken', 1) 
	or mlr_utils.have_item('device_pda_milspec_broken', 1)
end

function fix_pda_screen_check()
	for _, item_name in ipairs(pda_list) do	
		if db.actor:object(item_name) and item_name:find("damaged") then
			return mlr_utils.have_item(item_name, 1)
		end
	end
end

function fix_pda_screen(first_speaker, second_speaker)

	for _, damaged_pda in ipairs(pda_list) do
		
		if db.actor:object(damaged_pda) and damaged_pda:find("damaged") then
			
			local repaired_pda = get_pda_name(damaged_pda)					
			replace_item(damaged_pda, repaired_pda)				
			news_manager.relocate_item(db.actor, "out", damaged_pda)
			news_manager.relocate_item(db.actor, "in", repaired_pda)
			dialogs.relocate_money_from_actor(first_speaker, second_speaker, 5000) 
			news_manager.send_tip(db.actor, game.translate_string("st_pda_screen_fix"), nil, default, 10000)
			break
		end
	end
end

function fix_pda_screen_check_money()
	return mlr_utils.have_money(5000)
end

function fix_pda_0_check_money()
	return mlr_utils.have_money(5000) and mlr_utils.have_item('device_pda_0_broken', 1)
end

function fix_pda_1_check_money()
	return mlr_utils.have_money(10000) and mlr_utils.have_item('device_pda_1_broken', 1)
end

function fix_pda_2_check_money()
	return mlr_utils.have_money(20000) and mlr_utils.have_item('device_pda_2_broken', 1)
end

function fix_pda_3_check_money()
	return mlr_utils.have_money(40000) and mlr_utils.have_item('device_pda_3_broken', 1)
end

function fix_pda0_give_money(first_speaker, second_speaker)
	fix_pda("device_pda_0_broken", "device_pda_0", 5000, first_speaker, second_speaker)
end

function fix_pda1_give_money(first_speaker, second_speaker)
	fix_pda("device_pda_1_broken", "device_pda_1", 10000, first_speaker, second_speaker)
end

function fix_pda2_give_money(first_speaker, second_speaker) 
	fix_pda("device_pda_2_broken", "device_pda_2", 20000, first_speaker, second_speaker)
end

function fix_pda3_give_money(first_speaker, second_speaker) 
	fix_pda("device_pda_3_broken", "device_pda_3", 40000, first_speaker, second_speaker)
end

----------------------------------------------------------------------------------------------------
-- PDA Repair Kit
----------------------------------------------------------------------------------------------------

function pda_repair_kit(obj_b, obj_d, slot_from, slot_to)

	local tool = obj_b:section()
    local device = obj_d:section()
	local is_device = device:find("device_") or device:find("detector_")
	local is_broken_or_damaged = device:find("_broken") or device:find("_damaged[1-5]$")

	if is_device and is_broken_or_damaged and tool:find("tool_fix_pda") then
		local fixed_device = device:gsub("_broken$", ""):gsub("_damaged[1-5]$", "")
		replace_item(device,fixed_device)
		alife_release(db.actor:object(tool))
		actor_effects.play_item_fx("craft_dummy")
	end

end

----------------------------------------------------------------------------------------------------
-- Device \ PDA Damage + BSOD + Screen Damage
----------------------------------------------------------------------------------------------------
test_trigger = 0
test_delay = 0
function actor_on_before_hit(s_hit)

	tg = time_global()

	--Without this PDA will multiply if actor has been hit by shotgun or many times in a small period of time - spend 2 hours
	if test_trigger == 0 then
		test_delay = tg + 1000
		test_trigger = 1
	end

	local check_chance = math.random(0, 100)
	
	local check_damage_type_physical = {
		[hit.explosion] = true,
		[hit.fire_wound] = true,
		[hit.strike] = true,
		[hit.wound] = true
	}
	
	
	if check_damage_type_physical[s_hit.type] and (check_chance < settings.other.damage_chance) then

		for i, pda in ipairs(pda_list) do	
			if db.actor:object(pda) and not pda:find("damaged5") and (test_trigger == 1 and tg > test_delay) then

				local pda_base_name = get_pda_name(pda)
				local current_damage = 0	

				if pda:find("damaged") then
					current_damage = tonumber(pda:match("damaged(%d)") or 0)
				end
					
				if current_damage < 5 then
					
					local damaged_pda
					
					if current_damage == 0 then
						damaged_pda = pda_base_name .. "_damaged1"
					else
						damaged_pda = pda_base_name .. "_damaged" .. (current_damage + 1)
					end
					
					replace_item(pda, damaged_pda)
					utils_obj.play_sound("material\\glass\\glass_fall03hl")
					test_trigger = 0 --Fucking ensure PDAs don't multiply!
				end
			end
		end
	end
	
	if s_hit.type == hit.shock then
		
		break_device("electra","up_firstc_pda")
		electra_glitch_value = clamp(electra_glitch_value + s_hit.power * 10, 0, 10)

	end
	
	if s_hit.type == hit.radiation then
		radiation_amount = radiation_amount + (s_hit.power * settings.other.radiation.scale)
		radiation_glitch_value = clamp(radiation_amount, 0, 10)
	end
end

function pda_break_bsod()
	
	local check_chance = math.random(0, 100)	
	
	if 
		not (timed_error > 0 or db.actor:has_info("pda_timed_error_2") or timed_error_protection > 0) 
		and check_trigger("pda_error")
		and (xr_conditions.surge_started() or psi_storm_manager.is_started()) 
	then 
	
		for _, pda in ipairs(pda_list) do		
			
			if db.actor:object(pda) then
				
				local pda_level = get_pda_level(pda)
				local chance = settings.pda.die_chance.timed_error[pda_level]
				
				if db.actor:has_info("bios_overclock") then
					chance = chance * 2
				end
				
				if (check_chance < chance ) then
					give_info("pda_timed_error_2")
					process_pda_call()
				end
				break
			end
		end
	end
end

function pda_break_from_emission()
	if not check_trigger("emission") then return end
	if xr_conditions.surge_started() or psi_storm_manager.is_started() then 
		break_device("emission","up_firste_pda")
	end
end

function pda_break_from_radiation()
	if not check_trigger("radiation") then return end
	if radiation_amount > settings.other.radiation.amount_to_fry then 
		break_device("radiation","up_firsta_pda")
	end
end

----------------------------------------------------------------------------------------------------
-- Process Glitch
----------------------------------------------------------------------------------------------------

function electra_glitch_lower()
	if electra_glitch_value > 0.01 then
		electra_glitch_value = electra_glitch_value - 0.01
	else
		electra_glitch_value = 0
	end
end

electra_glitch_value = 0
damage_glitch_value = 0
radiation_glitch_value = 0
overclock_glitch_value = 0
surge_psi_glitch_value = 0
process_glitch = item_device.device_binder.process_glitch
item_device.device_binder.process_glitch = function(self, id, section, condition)
	process_glitch(self, id, section, condition)

	radiation_glitch_value = clamp(radiation_amount, 0, 10)

	if db.actor:has_info("bios_overclock") then
		overclock_glitch_value = 0.15
	else
		overclock_glitch_value = 0
	end

	-- Emissions: the closer the wave, the higher the psi influnces
	if GetEvent("surge", "state") then
		local surge_time = GetEvent("surge", "time") or 0
		surge_psi_glitch_value = (surge_time > 168) and normalize(surge_time, 220, 168) or normalize(surge_time, 20, 168)
		surge_psi_glitch_value = clamp(surge_psi_glitch_value,0,1)
		
	-- Psi-storms: huge spike when a vortex hits the ground
	elseif GetEvent("psi_storm", "state") then
		if GetEvent("psi_storm", "vortex") then
			surge_psi_glitch_value = 0.3 + (1 - 0.3) * math.random()
		else
			surge_psi_glitch_value = 0.1 + (0.3 - 0.1) * math.random()
		end
	else
		surge_psi_glitch_value = 0
	end

	self.object:set_psy_factor(((radiation_glitch_value + electra_glitch_value) * settings.other.radiation.glitch_scale) + damage_glitch_value + settings.other.passive_glitch_value + overclock_glitch_value + surge_psi_glitch_value)
	
end

----------------------------------------------------------------------------------------------------
-- PDA Reboot
----------------------------------------------------------------------------------------------------

function reboot_action(dik)
	if dik == settings.reboot_key then
		local obj = db.actor:active_item() or nil		
		if obj then
			local sec = obj:section()
			if sec:find("device_pda_") and obj:condition() > 0.05 and not sec:find("broken") then
				timed_error = math.random(settings.other.timed_error_min_time, settings.other.timed_error_max_time)
				alife_process_item(sec, obj:id(), {cond = obj:condition() - 0.01})
				utils_obj.play_sound("device\\pda\\pda_dead")
				game.play_hud_motion(2, "device_pda_no_hud", "anm_empty", true, 1)
				CreateTimeEvent("fe_time_event", "reboot", 1.6, process_pda_call)
			end
		end
	end
end

----------------------------------------------------------------------------------------------------
-- PDA Process Things
----------------------------------------------------------------------------------------------------

function process_pda_call()
	
	RemoveTimeEvent("fe_time_event", "reboot")
	
	local list_of_error_sections = {
		["eptTM1"] = true,
		["eptTM2"] = true,
		["eptBroken"] = true,
		["eptMonolith"] = true,
		["eptMonolithHackers"] = true,
		["eptBlocked"] = true,
	}
	
	local monolith_hackers = {
		["l10u_bunker"] = true,
		["l12u_control_monolith"] = true,
		["l13u_warlab"] = true,
		["labx8"] = true,
		["l10_radar"] = true,
		["l11_hospital"] = true,
		["l13_generators"] = true,
		["l12_stancia_2"]  = true,
		["l12_stancia"] = true,
		["l11_pripyat"] = true,
		["pripyat"] = true,
	}

	local monolith = {
		["l12u_sarcofag"] = true,
	}
	
	local no_jaming_factions = {
		["monolith"] = true,
		["greh"] = true,
		["zombied"] = true,	
	}

	local player_faction = get_actor_true_community()
	local levelname = level.name()
	local tab = ActorMenu.get_pda_menu():GetActiveSection()
	local pda = db.actor:item_in_slot(8)
	local overclock = db.actor:has_info("bios_overclock")
		
	if pda then
		
		if pda:section():find("damaged1") then
			damage_glitch_value = 0.1
		elseif pda:section():find("damaged2") then
			damage_glitch_value = 0.2
		elseif pda:section():find("damaged3") then
			damage_glitch_value = 0.3
		elseif pda:section():find("damaged4") then
			damage_glitch_value = 0.4
		elseif pda:section():find("damaged5") then
			damage_glitch_value = 0.5
		else
			damage_glitch_value = 0
		end
	
		local show_player = ini_sys:r_float_ex(pda:section(),"show_player")
		level.map_remove_object_spot(0, "actor_location")
		level.map_remove_object_spot(0, "actor_location_p")
		process_companion_icons(false) -- Companion icons
		
		if overclock then
			show_player = 3
		end
		
		if show_player >= 1 then
			level.map_add_object_spot(0, "actor_location", "disable_hint")
		end
		
		if show_player >= 2 then
			level.map_add_object_spot(0, "actor_location_p", "disable_hint")
		end
		
		if show_player >= 3 then
			process_companion_icons(true) -- Companion icons
		end
		
		if db.actor:item_in_slot(8):section():find("pda_senya_podkidnoy") then
			ActorMenu.get_pda_menu():SetActiveSubdialog("eptBlocked")
		
		elseif timed_error > 0 then
			ActorMenu.get_pda_menu():SetActiveSubdialog("eptTM1")
			
		elseif db.actor:has_info("pda_timed_error_2") then
			ActorMenu.get_pda_menu():SetActiveSubdialog("eptTM2")
		
		elseif 
			not (timed_error_protection > 0 or overclock) 
			and (xr_conditions.surge_started() or psi_storm_manager.is_started())
		then
			ActorMenu.get_pda_menu():SetActiveSubdialog("eptBroken")
		
		elseif monolith[levelname] and not overclock then
			ActorMenu.get_pda_menu():SetActiveSubdialog("eptMonolith")
		
		elseif 
			not (pda:has_upgrade("up_seconc_pda") or no_jaming_factions[player_faction] or overclock)
			and (monolith_hackers[levelname])
		then
			ActorMenu.get_pda_menu():SetActiveSubdialog("eptMonolithHackers")
			
		elseif list_of_error_sections[tab] then
			ActorMenu.get_pda_menu():SetActiveSubdialog("eptTasks")
		end
	end
end

function process_pda_button(dik)
	local bind = dik_to_bind(dik)
	local pda = db.actor:item_in_slot(8)
	if (bind == key_bindings.kACTIVE_JOBS or bind == key_bindings.kCUSTOM20) and pda then
		process_pda_call()
	end
end

function process_pda_slot(obj)
	if obj:section():find("pda_") and not obj:section():find("itm_pda_") then	
		process_pda_call()
	end
end

--Took from Better PDA Progression
function process_companion_icons(enable)
	for id,v in pairs(axr_companions.non_task_companions) do
		if enable then
			level.map_add_object_spot(id, "ui_pda2_companion_location", "st_ui_pda_companion")
		else
			level.map_remove_object_spot(id, "ui_pda2_companion_location")
		end
	end
	
	for id,squad in pairs(axr_companions.companion_squads) do
		if squad then
			for k in squad:squad_members() do
				if enable then
					level.map_add_object_spot(k.id, "ui_pda2_companion_location", "st_ui_pda_companion")
				else
					level.map_remove_object_spot(k.id, "ui_pda2_companion_location")
				end
			end
		end
	end
end

--Took from Bart's Minimap
local prev_cnt = 0
function update_count()
	local cnt = 0
	local pos = db.actor:position()
	local pda = db.actor:item_in_slot(8)
	if pda and pda:condition() > 0.01 and db.actor:has_info("bios_can_beep") then
		local can_beep = ini_sys:r_bool_ex(pda:section(),"can_beep")
		if can_beep == true then
			for i=1,#db.OnlineStalkers do
				local id = db.OnlineStalkers[i]
				local obj = db.storage[id] and db.storage[id].object or level.object_by_id(id)
				if obj and IsStalker(obj) and obj:alive() and (pos:distance_to(obj:position()) <= settings.other.beep_radius) then
					cnt = cnt + 1
					if (prev_cnt < cnt) then
						xr_effects.play_snd(db.actor, nil, {[1] = "beeping\\contact_1"})
					end
				end
			end
		end
		if (prev_cnt > cnt)then
			xr_effects.play_snd(db.actor, nil, {[1] = "beeping\\contact_2"})
		end
		-- show number if count is bigger than 1
		prev_cnt = cnt
	end
end

----------------------------------------------------------------------------------------------------
-- Process every second
----------------------------------------------------------------------------------------------------

function on_every_second()

	RemoveTimeEvent("fe_time_event", "on_every_second")
	CreateTimeEvent("fe_time_event", "on_every_second", 1, on_every_second)

	--local ffi = require("ffi")
	--local lib = ffi.load("user32")  -- Windows DLL  
	--ffi.cdef[[  
	--	int MessageBoxA(void* hWnd, const char* text, const char* caption, int type);  
	--]]  
	--lib.MessageBoxA(nil, "Sosal?", "Sosal?", 4 + 32 + 0)

	if timed_error > 0 then
		timed_error = timed_error - 1
		give_info("process_pda_timed_error")		
	elseif timed_error == 0 and db.actor:has_info("process_pda_timed_error") then
		disable_info("process_pda_timed_error")
		timed_error_protection = math.random(30, 60)
		process_pda_call()		
	elseif timed_error_protection > 0 then
		timed_error_protection = timed_error_protection - 1
	end

	if radiation_amount > 0.01 then
		radiation_amount = radiation_amount - settings.other.radiation.amount_lower
	elseif radiation_amount < 0.01 then
		radiation_amount = 0
	end

end

----------------------------------------------------------------------------------------------------
-- Other
----------------------------------------------------------------------------------------------------

function reboot_call(seconds)
	timed_error = seconds
	process_pda_call()	
end

function actor_on_first_update()
	if not db.actor:has_info("fe_first_game_start") then
		timed_error = 20
		give_info("fe_first_game_start")
		give_info("bios_can_beep")		
	end
	CreateTimeEvent("fe_time_event", "on_every_second", 1, on_every_second)
end

function save_state(m_data)
	m_data.radiation_amount = radiation_amount or 0	
end

function load_state(m_data)
	radiation_amount = m_data.radiation_amount or 0
end

function on_game_start()
	RegisterScriptCallback("actor_on_update",pda_break_from_emission)
	RegisterScriptCallback("actor_on_update",pda_break_from_radiation)
	RegisterScriptCallback("actor_on_update",pda_break_bsod)
	RegisterScriptCallback("actor_on_update", electra_glitch_lower)
	RegisterScriptCallback("actor_on_update", update_count)
	RegisterScriptCallback("actor_on_before_hit",actor_on_before_hit)
	RegisterScriptCallback("on_key_press",reboot_action)
	RegisterScriptCallback("on_key_release", process_pda_button)
	RegisterScriptCallback("actor_item_to_slot", process_pda_slot)
	RegisterScriptCallback("actor_on_first_update", actor_on_first_update)
	RegisterScriptCallback("ActorMenu_on_item_drag_drop", pda_repair_kit)
	RegisterScriptCallback("save_state", save_state)
    RegisterScriptCallback("load_state", load_state)
	exec_console_cmd("g_3d_pda 1")
end