#include "common.h"
#include "screenspace_hud_raindrops.h"

struct v2p
{
    float2 tc0: TEXCOORD0;
	float3 RDrops	: TEXCOORD1;	//Raindrops
    float4 c0: COLOR0;
};

// Основные параметры
#define EFFECTS_MULTIPLIER 1.00 // Общий множитель интенсивности эффектов
#define SCANLINE_THRESHOLD 0.75 // Порог активации движущейся линии (0-1)
#define STATIC_AMOUNT 0.50     // Базовое количество статического шума

// Параметры движущейся линии
#define SCANLINE_SPEED 0.20       // Скорость движения линии
#define SCANLINE_WIDTH 0.0025     // Толщина линии
#define SCANLINE_DISTORT 0.02    // Сила искажения от линии

Texture2D s_pdascreen;
Texture2D s_noise;
float4 pda_params; // x:alpha, y:glitch_amount, z:brightness

// Генерация статического шума
float3 staticNoise(float2 uv) {
    return s_noise.Sample(smp_base, uv * 10.0).rgb * STATIC_AMOUNT;
}


// Движущаяся линия
float2 scanlineDistortion(float2 uv, float time, float intensity)
{
    // Проверяем, превышен ли порог для активации линии
    if (intensity > SCANLINE_THRESHOLD)
    {
        float linePos = frac(time * SCANLINE_SPEED);
        float dist = abs(uv.y - linePos);
        
        if (dist < SCANLINE_WIDTH) 
        {
            float distortAmount = (1.0 - dist/SCANLINE_WIDTH) * SCANLINE_DISTORT;
            uv.x += sin(uv.y * 100.0 + time * 10.0) * distortAmount;
        }
    }
    return uv;
}

float4 main(v2p I): SV_Target
{

	// HUD Rain drops - SSS Update 17
	// https://www.moddb.com/mods/stalker-anomaly/addons/screen-space-shaders/

    float4 drops = 0; // xy = Normal | z = Overall str | w = reflection str
    float extra_col = 0;
    float2 finalUV = I.tc0;
    
    if (ssfx_hud_drops_1.y > 0)
    {
        // Calc droplets
        float4 Layer0 = s_hud_rain.Sample(smp_base, (I.tc0 + float2(0, -ssfx_hud_drops_1.x * 0.01f)) * float2(1.5f, 0.75f)); // Big drops
        float4 Layer1 = s_hud_rain.Sample(smp_base, I.tc0 * float2(5.0f, 3.0f)); // Small drops [ Static ]

        // Process animation
        float3 result = ssfx_process_drops(Layer0, 0.1f, 0.2f) + ssfx_process_drops(Layer1, 0.2f, 1.0f);
        result.xy = clamp(result.xy, -1.0f, 1.0f);

        // Only apply to facing up surfaces [ World Y+ ]
        result.xyz *= saturate(I.RDrops.y);

        // Intensity from script ( Cover + Rain intensity )
        result.xyz *= ssfx_hud_drops_1.y;

        // Refraction
        finalUV = I.tc0.xy - result.xy * 0.4f;

        // Add a small amount of white.
        extra_col = saturate(Layer0.x + Layer1.x) * result.z * 0.25f;
    }

    // Рассчитываем итоговую интенсивность эффектов
    float effectsIntensity = pda_params.y * EFFECTS_MULTIPLIER;
	
	// Применяем искажение только если интенсивность выше порога
    finalUV = scanlineDistortion(I.tc0, timers.x, pda_params.y);
    
    float4 original = s_pdascreen.Sample(smp_base, finalUV) + extra_col;

    // Добавляем статический шум, масштабированный по интенсивности
    float3 finalColor = original.rgb + staticNoise(I.tc0) * effectsIntensity;
    
    // Финальная коррекция яркости и прозрачности
    return float4(finalColor * pda_params.z, pda_params.x);
}